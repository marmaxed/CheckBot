package tag.sources.checkmebot.service;

import org.apache.commons.lang3.tuple.ImmutablePair;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.objects.Document;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import tag.sources.checkmebot.CheckBot;
import tag.sources.checkmebot.models.entity.BotUser;
import tag.sources.checkmebot.repository.UserRepository;
import tag.sources.checkmebot.utils.TextConsts;

@Service
@Slf4j
@RequiredArgsConstructor
public class RecordService {
    private final UserRepository userRepo;
    private final KeyBoardService keyBoardService;
    private final ScheduleTaskService scheduleTaskService;

    public ImmutablePair<String, ReplyKeyboardMarkup> handleMessage(Long chatId, String text, CheckBot checkBot) {
        switch (text) {
            case "üìÑ –¢–µ–∫—Å—Ç–æ–≤—ã–π –±–æ—Ç" -> {
                ReplyKeyboardMarkup replyKeyboardMarkup = keyBoardService.getTextKeyBoard();
                return new ImmutablePair(TextConsts.TEXT_BOT_MESSAGE, replyKeyboardMarkup);
            }
            case "\uD83C\uDFE2 –î–ª—è –±–∏–∑–Ω–µ—Å–∞ –∏ –ª–∏—á–Ω–æ–≥–æ –±–ª–æ–≥–∞" -> {
                ReplyKeyboardMarkup replyKeyboardMarkup = keyBoardService.getBusinessKeyBoard();
                return new ImmutablePair(TextConsts.BUSINESS_BOT_MESSAGE, replyKeyboardMarkup);
            }
            case "\uD83D\uDC65 –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏" -> {
                ReplyKeyboardMarkup replyKeyboardMarkup = keyBoardService.getUserKeyBoard();
                return new ImmutablePair(TextConsts.USER_BOT_MESSAGE, replyKeyboardMarkup);
            }
            case "\uD83D\uDCE6 –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏" -> {
                ReplyKeyboardMarkup replyKeyboardMarkup = keyBoardService.getFilesKeyBoard();
                return new ImmutablePair(TextConsts.FILES_BOT_MESSAGE, replyKeyboardMarkup);
            }
            case "\uD83C\uDD95 –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é" -> {
                ReplyKeyboardMarkup replyKeyboardMarkup = keyBoardService.getSchedulerKeyBoard();
                return new ImmutablePair(TextConsts.SCHEDULER_BOT_MESSAGE, replyKeyboardMarkup);
            }
            case "‚ÑπÔ∏è –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ" -> {
                ReplyKeyboardMarkup replyKeyboardMarkup = keyBoardService.getInfoKeyBoard();
                return new ImmutablePair(TextConsts.INFO_BOT_MESSAGE, replyKeyboardMarkup);
            }
            case "/show" -> {
                return new ImmutablePair("–ü—Ä–æ—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞", keyBoardService.getStartKeyBoard());
            }
            default -> {
                if (text.contains("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")) {
                    return scheduleTaskService.createTask(checkBot, chatId, text);
                }
                registerUser(chatId);
                ReplyKeyboardMarkup replyKeyboardMarkup = keyBoardService.getStartKeyBoard();
                return new ImmutablePair(TextConsts.START_BOT_MESSAGE, replyKeyboardMarkup);
            }
        }
    }

    public ImmutablePair<Document, ReplyKeyboardMarkup> handleMessage(Long chatId, Document file, CheckBot checkBot) {
        ReplyKeyboardMarkup replyKeyboardMarkup = keyBoardService.getTextKeyBoard();
        return new ImmutablePair(TextConsts.TEXT_BOT_MESSAGE, replyKeyboardMarkup);
    }

    private String registerUser(Long chatId) {
        if (userRepo.existsById(chatId)) {
            return "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º";
        }
        userRepo.save(new BotUser(chatId, "BotUser" + chatId));
        return "–ü—Ä–∏–≤–µ—Ç, —è –ø—Ä–æ—Å—Ç–æ–π –±–æ—Ç —Å –±–∞–∑–æ–≤—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º, —Å–¥–µ–ª–∞–Ω–Ω—ã–π, —á—Ç–æ–± –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—é —Ä–∞–±–æ—Ç—É. \n"
                + "–ê –≤–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –º–µ–Ω—è —Å–¥–µ–ª–∞–ª:\n";
    }
}
